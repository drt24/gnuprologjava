/* GNU Prolog for Java
 * Copyright (C) 1997-1999  Constantine Plotnikov
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA  02111-1307, USA. The text of license can be also found 
 * at http://www.gnu.org/copyleft/lgpl.html
 */
options {
  STATIC = false;
  USER_CHAR_STREAM = true;
  //DEBUG_TOKEN_MANAGER = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(TermParser)
package gnu.prolog.io.parser.gen;
import gnu.prolog.io.parser.*;
import gnu.prolog.term.*;
import gnu.prolog.io.*;
import gnu.prolog.vm.TermConstants;
import gnu.prolog.vm.Environment.DoubleQuotesValue;
import gnu.prolog.vm.CanSetDoubleQuotes;
import java.util.*;

public final class TermParser implements CanSetDoubleQuotes
{
  CharStream stream;
  private DoubleQuotesValue doubleQuotesState = DoubleQuotesValue.getDefault();

  public int getCurrentLine()
  {
    return stream.getEndLine(); 
  }

  public int getCurrentColumn()
  {
    return stream.getEndColumn(); 
  }


  public boolean isFunctor()
  {
    return getToken(1).kind == TermParserConstants.NAME_TOKEN &&
           getToken(2).kind == TermParserConstants.OPEN_TOKEN &&
           getToken(2).specialToken == null;
  }
  

  boolean testOp(ReadOptions options, int i)
  {
    Token tk = getToken(i);
    return tk instanceof NameToken && ((NameToken)tk).isOperator(options.operatorSet);
  }

  boolean testNoOp (ReadOptions options)
  {
    Token tk = getToken(1);
    return tk instanceof NameToken && ((NameToken)tk).isNonOperator(options.operatorSet);
  }

  boolean testFX (ReadOptions options, int priority)
  {
    Token tk = getToken(1);
    return !isFunctor() && tk instanceof NameToken && ((NameToken)tk).isFxOperator(options.operatorSet,priority);
  }
  boolean testFY (ReadOptions options, int priority)
  {
    Token tk = getToken(1);
    return !isFunctor() && tk instanceof NameToken && ((NameToken)tk).isFyOperator(options.operatorSet,priority);
  }
  boolean testXFX(ReadOptions options, int priority)
  {
    Token tk = getToken(1);
    return tk instanceof NameToken && ((NameToken)tk).isXfxOperator(options.operatorSet,priority);
  }
  boolean testXFY(ReadOptions options, int priority)
  {
    Token tk = getToken(1);
    return priority >= options.operatorSet.getCommaLevel() && tk.kind == COMMA_TOKEN  ||
           tk instanceof NameToken && ((NameToken)tk).isXfyOperator(options.operatorSet,priority);
  }
  boolean testYFX(ReadOptions options, int priority)
  {
    Token tk = getToken(1);
    return tk instanceof NameToken && ((NameToken)tk).isYfxOperator(options.operatorSet,priority);
  }
  boolean testXF (ReadOptions options, int priority)
  {
    Token tk = getToken(1);
    return tk instanceof NameToken && ((NameToken)tk).isXfOperator(options.operatorSet,priority);
  }
  boolean testYF (ReadOptions options, int priority)
  {
    Token tk = getToken(1);
    return tk instanceof NameToken && ((NameToken)tk).isYfOperator(options.operatorSet,priority);
  }
  boolean isExpSeparator(int i)
  {
    Token tk = getToken(i);
    switch (tk.kind)
    {
    case COMMA_TOKEN              :
    case CLOSE_TOKEN              :
    case CLOSE_CURLY_TOKEN        :
    case CLOSE_LIST_TOKEN         :
    case END_TOKEN                :
    case TermParserUtils.EOF_TOKEN:
    case HEAD_TAIL_SEPARATOR_TOKEN:
      return true;
    default:
      return false;
    }
  }

  boolean is1201Separator(int i)
  {
    Token tk = getToken(i);
    switch (tk.kind)
    {
    case CLOSE_TOKEN              :
    case CLOSE_CURLY_TOKEN        :
    case END_TOKEN                :
    case TermParserUtils.EOF_TOKEN:
      return true;
    default:
      return false;
    }
  }


  Term createTerm(CompoundTermTag op, Term t)
  {
    if (op.arity != 1)
    {
      throw new IllegalArgumentException("Arity of term tag must be 1");
    }
    return new CompoundTerm(op, new Term[]{t});
  }

  Term createTerm(CompoundTermTag op, Term t1, Term t2)
  {
    if (op.arity != 2)
    {
      throw new IllegalArgumentException("Arity of term tag must be 2");
    }
    return new CompoundTerm(op, new Term[]{t1,t2});
  }

  public TermParser(java.io.Reader r, int line, int col)
  {
    this(new ReaderCharStream(r, line, col),null);
  }

  public TermParser(ReaderCharStream str, Object obj)
  {
    this(str);
    stream = str;
  }

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * gnu.prolog.vm.CanSetDoubleQuotes#setDoubleQuotesState(gnu.prolog.vm.Environment
	 * .DoubleQuotesValue)
	 */
	public void setDoubleQuotesState(DoubleQuotesValue value)
	{
		doubleQuotesState = value;
	}

}

PARSER_END(TermParser)


Term readTerm(ReadOptions options):
{
  Term t;
}
{
  try
  {
    (
      <EOF>
      {
        return null;
      }
    | <END_TOKEN>
      {
        return null;
      }
    | t = term(options, options.operatorSet.getMaxLevel())
      end()
      {
        return t;
      }
    )
  }
  catch(ParseException ex)
  {
    skipToDot();
    throw ex;
  }
}

JAVACODE void skipToDot()
{
  Token tok = getToken(0);
  while ((tok.kind != END_TOKEN) && (tok.kind != EOF)) {
    tok = getNextToken();
  }
}



Term readTermEof(ReadOptions options):
{
  Term t;
}
{
  try
  {
    t = term(options, options.operatorSet.getMaxLevel())
    <EOF>
    {
      return t;
    }
  }
  catch(ParseException ex)
  {
    skipToEof();
    throw ex;
  }
}

JAVACODE void skipToEof()
{
  Token tok = getToken(0);
  while (tok.kind != TermParserUtils.EOF_TOKEN) {
    tok = getNextToken();
  }
}

Term term(ReadOptions options, int priority):
{
  int p = options.operatorSet.getNextLevel(priority);
  Term t;
}
{
  (
    LOOKAHEAD({p==0})
    t = simpleTerm(options)
  |
    LOOKAHEAD(<NAME_TOKEN>,{priority==1201 && is1201Separator(2)})
    t = name()
  |
    t = operatorTerm(options, p)
  )
  {return t;}
}

JAVACODE Term exp(ReadOptions options)
{
  Term t;
  if(testOp(options, 1) && isExpSeparator(2))
  {
    t = name();
  }
  else
  {
    t = term(options, options.operatorSet.getCommaLevel()-1);
  }
  return t;
}


/*
JAVACODE Term exp(ReadOptions options):
{
  Term t;
}
{
  (
    //LOOKAHEAD(<NAME_TOKEN>,{getToken(1).kind == NAME_TOKEN && !isTermStart(2)})
    LOOKAHEAD({testOp(options, 1) && isExpSeparator(2)})
    //LOOKAHEAD(<NAME_TOKEN>,(<CLOSE_TOKEN>|<CLOSE_CURLY_TOKEN>|<CLOSE_LIST_TOKEN>|<END_TOKEN>|<EOF_TOKEN>|<HEAD_TAIL_SEPARATOR_TOKEN>|<COMMA_TOKEN>))
    t = name()
  |
    t = term(options, options.operatorSet.getCommaLevel()-1)
  )
  {return t;}
}
*/
// prefix operator
CompoundTermTag op(ReadOptions options, int priority):
{
  CompoundTermTag f;
  Term t;
}
{
  <NAME_TOKEN>
  {
    NameToken tk = (NameToken)token;
    return tk.fxOp.tag;
  }
}

// infix or postfix
CompoundTermTag op2(ReadOptions options, int priority):
{
  CompoundTermTag f;
  Term t;
}
{
  (
    LOOKAHEAD(<COMMA_TOKEN>,{priority >= 1000})
    comma()
    {
      f = TermConstants.conjunctionTag;
      return f;
    }
  |
    <NAME_TOKEN>
    {
      NameToken tk = (NameToken)token;
      return tk.xfOp.tag;
    }
  )
}



JAVACODE Term operatorTerm(ReadOptions options, int priority)
{
  int p = priority;
  Term t1,t2;
  CompoundTermTag f;
  if(testFY(options, p)) // fy term
  {
    f = op(options, p);
    t1 = term(options, p);
    t1 = createTerm(f,t1);
  }
  else if (testFX(options, p)) // fx term
  {
    f = op(options, p);
    t1 = term(options, p-1);
    t1 = createTerm(f,t1);
  }
  else // infix or postfix term
  {
    t1 = term(options, p-1);
    if (testXFX(options, p))
    {
      f = op2(options, p);
      t2 = term(options, p-1);
      t1 = createTerm(f,t1,t2);
    }
    else if (testXF(options, p))
    {
      f = op2(options, p);
      t1 = createTerm(f,t1);
    }
    else if (testXFY(options, p))
    {
      f = op2(options, p);
      t2 = term(options, p);
      t1 = createTerm(f,t1,t2);
    }
    else
    {
      while (true)
      {
        Token tk = getToken(1);
        if ((tk.kind == INTEGER_TOKEN || tk.kind == FLOAT_NUMBER_TOKEN) && tk.image.charAt(0) == '-' )
        {
          if(options.operatorSet.lookupXf("-") == Operator.nonOperator)
          {
            break; 
          }
          if(tk.kind == INTEGER_TOKEN)
          {
            jj_consume_token(INTEGER_TOKEN);
            t1 = createTerm(CompoundTermTag.minus2,t1,IntegerTerm.get(-(IntegerTerm.get(tk.image).value)));
          }
          else
          {
           jj_consume_token(FLOAT_NUMBER_TOKEN);
           t1 = createTerm(CompoundTermTag.minus2,t1,new FloatTerm(-(new FloatTerm(tk.image).value)));
          }
        }  
        else if (testYFX(options, p))
        {
          f = op2(options, p);
          t2 = term(options, p-1);
          t1 = createTerm(f,t1,t2);
        }
        else if (testYF(options, p))
        {
          f = op2(options, p);
          t1 = createTerm(f,t1);
        }
        else
        {
          break;
        }
      }
    }
  }
  return t1;
}

// 6.3.1.3 Atoms
Term simpleTerm(ReadOptions options):
{Term t;}
{
  (
  // Compound term. Functional notation
    LOOKAHEAD(<NAME_TOKEN>,
              {getToken(2).kind == TermParserConstants.OPEN_TOKEN &&
               getToken(2).specialToken == null})
    t = compound(options)
  // Atom term
  | LOOKAHEAD({testNoOp(options)})
    t = name()
  // Variable term
  | LOOKAHEAD(<VARIABLE_TOKEN>)
    t = variable(options)
  // integer term
  | LOOKAHEAD(<INTEGER_TOKEN>)
    t = integer()
  // float number
  | LOOKAHEAD(<FLOAT_NUMBER_TOKEN>)
    t = float_number()
  // list
  | LOOKAHEAD(<OPEN_LIST_TOKEN>)
    t = list_term(options)
  // curly
  | LOOKAHEAD(<OPEN_CURLY_TOKEN>)
    t = curly_term(options)
  // char code list
  | LOOKAHEAD(<CHAR_CODE_LIST_TOKEN>)
    t = char_code_list()
  // ( term )
  | LOOKAHEAD(<OPEN_TOKEN>)
    open() t = term(options, 1201) close()
  )
  {
    return t;
  }
}

Term list_term(ReadOptions options):
{
  Term rc = null;
  Term t1 = null;
  Term t2;
}
{
  open_list()
  (
    LOOKAHEAD(<CLOSE_LIST_TOKEN>)
    {
    }
  | [
      t1 = exp(options)
      {
        t1 = createTerm(TermConstants.listTag,t1,null);
        rc = t1;
      }
      (
         LOOKAHEAD(<COMMA_TOKEN>)
         comma() t2 = exp(options)
         {
           t2 = createTerm(TermConstants.listTag,t2,null);
           ((CompoundTerm)t1).args[1] = t2;
           t1 = t2;
         }
      )*
      [
        LOOKAHEAD(<HEAD_TAIL_SEPARATOR_TOKEN>)
        ht_sep() t2 = exp(options)
        {
          ((CompoundTerm)t1).args[1] = t2;
        }
      ]
    ]
  )
  close_list()
  {
    if (rc == null)
    {
      return TermConstants.emptyListAtom;
    }
    if (((CompoundTerm)t1).args[1] == null)
    {
      ((CompoundTerm)t1).args[1] = TermConstants.emptyListAtom;
    }
    return rc;
  }
}

Term curly_term(ReadOptions options):
{Term t = null;}
{
  open_curly()
  [
    t = term(options, 1201)
  ] close_curly()
  {
    if (t == null)
    {
      return TermConstants.emptyCurlyAtom;
    }
    else
    {
      return createTerm(CompoundTermTag.curly1, t);
    }
  }
}

CompoundTerm compound(ReadOptions options):
{
  AtomTerm functor;
  ArrayList args = new ArrayList();
  Term el;
  CompoundTerm rc;
}
{
  functor = name()
  open_ct()
  el = exp(options)
  {
    args.add(el);
  }
  (
    LOOKAHEAD(<COMMA_TOKEN>)
    comma()
    el = exp(options)
    {
      args.add(el);
    }
  )*
  close()
  {
    int n = args.size();
    rc = new CompoundTerm(functor,n);
    for (int i=0; i<n; i++)
    {
      rc.args[i] = (Term)args.get(i);
    }
    return rc;
  }
}
// 6.4 Tokens
// ~~~~~~~~~~
AtomTerm name():
{}
{
  <NAME_TOKEN>                // 6.4.2
  {
    return AtomTerm.get(((NameToken)token).getValue());
  }
}

VariableTerm variable(ReadOptions options):
{}
{
  <VARIABLE_TOKEN>         // 6.4.3
  {
    VariableTerm var = (VariableTerm)options.variableNames.get(token.image);
    if (var == null)
    {
      var = new VariableTerm();
      if (!"_".equals(token.image))
      {
        var.name = token.image;
        options.variableNames.put(token.image, var);
        options.singletons.put(token.image, var);
      }
      options.variables.add(var);
    }
    else
    {
      options.singletons.remove(token.image);
    }
    return var;
  }
}

IntegerTerm integer():
{}
{
   <INTEGER_TOKEN>           // 6.4.4
   {
     return IntegerTerm.get(token.image);
   }
}
FloatTerm float_number():
{}
{
  <FLOAT_NUMBER_TOKEN>        // 6.4.5
  {
    return new FloatTerm(token.image);
  }
}
Term char_code_list():
{}
{
  <CHAR_CODE_LIST_TOKEN>      // 6.4.6
  {
    String val = TermParserUtils.convertQuotedString(token.image,'\"');
    switch (doubleQuotesState)
		{
			case DQ_ATOM:
				return AtomTerm.get(val);
			case DQ_CHARS:
			{
				char[] valChars = val.toCharArray();
				AtomTerm[] valAtoms = new AtomTerm[valChars.length];
				int i, n = valChars.length;
				for (i = n - 1; i >= 0; --i)
				{
					valAtoms[i] = AtomTerm.get(valChars[i]);
				}
				return CompoundTerm.getList(valAtoms);
			}
			case DQ_CODES:
			default:
			{
				int i, n = val.length();
				Term rc = TermConstants.emptyListAtom;
				for (i = n - 1; i >= 0; i--)
				{
					rc = CompoundTerm.getList(IntegerTerm.get(val.charAt(i)), rc);
				}
				return rc;
			}
		}
  }
}

void open():
{}
{
  <OPEN_TOKEN>              // 6.4.8
}

void open_ct():
{}
{
  LOOKAHEAD({getToken(1).specialToken == null})
  <OPEN_TOKEN>           // 6.4.8
}

void close ():
{}
{
  <CLOSE_TOKEN>               // 6.4.8
}

void open_list ():
{}
{
   <OPEN_LIST_TOKEN>          // 6.4.8
}

void close_list():
{}
{
  <CLOSE_LIST_TOKEN>          // 6.4.8
}

void open_curly():
{}
{
   <OPEN_CURLY_TOKEN>         // 6.4.8
}

void close_curly ():
{}
{
  <CLOSE_CURLY_TOKEN>         // 6.4.8
}

void ht_sep():
{}
{
  <HEAD_TAIL_SEPARATOR_TOKEN>  // 6.4.8
}

void comma  ():
{}
{
  <COMMA_TOKEN>              // 6.4.8
}

void end () :
{}
{
  <END_TOKEN>                // 6.4.8
}

SPECIAL_TOKEN :
{
// 6.4.1 layout text
// -----------------
  <LAYOUT_TEXT_SEQUENCE: (<LAYOUT_TEXT>)+ >
| <#LAYOUT_TEXT: <COMMENT> | <LAYOUT_CHAR>/* 6.5.4*/>
| <#COMMENT: <SINGLE_LINE_COMMENT> | <BRACKETED_COMMENT> >
| <#SINGLE_LINE_COMMENT:
     <END_LINE_COMMENT_CHAR>/*6.5.3*/
     (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <#BRACKETED_COMMENT:  "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" >
}

TOKEN :
{
// 6.4.2 Names
  <NAME_TOKEN: <IDENTIFIER_TOKEN>
             | <GRAPHIC_TOKEN>
             | <QUOTED_TOKEN>
             | <SEMICOLON_TOKEN>
             | <CUT_TOKEN>>
| <#IDENTIFIER_TOKEN: <SMALL_LETTER_CHAR> (<ALPHA_NUMERIC_CHAR>)* >
| <#GRAPHIC_TOKEN: "." (<GRAPHIC_TOKEN_CHAR>)+ | <GRAPHIC_TOKEN_CHAR> (<GRAPHIC_TOKEN_CHAR>|".")* >
| <#GRAPHIC_TOKEN_CHAR: <GRAPHIC_CHAR> | <BACKSLASH_CHAR>>
| <#QUOTED_TOKEN: <SINGLE_QUOTE_CHAR>/*6.5.5*/
                  (<SINGLE_QUOTED_ITEM> )*
                  <SINGLE_QUOTE_CHAR>/*6.5.5*/>
| <#SINGLE_QUOTED_ITEM: <SINGLE_QUOTED_CHAR> /*6.4.2.1*/
                     | <CONTINUATION_ESCAPE_SEQUENCE>  >
| <#CONTINUATION_ESCAPE_SEQUENCE: <BACKSLASH_CHAR> /*6.5.5*/
                                 <NEW_LINE_CHAR> /*6.5.4*/>
| <#SEMICOLON_TOKEN: <SEMICOLON_CHAR> /*6.5.3*/ >
| <#CUT_TOKEN: <CUT_CHAR> >
// 6.4.2.1 QUOTED CHARACTERS
| <#SINGLE_QUOTED_CHAR: <NON_QUOTE_CHAR>
                     | <SINGLE_QUOTE_CHAR>/*6.5.5*/ <SINGLE_QUOTE_CHAR> /*6.5.5*/
                     | <DOUBLE_QUOTE_CHAR>/*6.5.5*/
                     | <BACK_QUOTE_CHAR>/*6.5.5*/>

| <#DOUBLE_QUOTED_CHAR: <NON_QUOTE_CHAR>
                     | <SINGLE_QUOTE_CHAR>/*6.5.5*/
                     | <DOUBLE_QUOTE_CHAR>/*6.5.5*/ <DOUBLE_QUOTE_CHAR>/*6.5.5*/
                     | <BACK_QUOTE_CHAR>/*6.5.5*/>
| <#BACK_QUOTED_CHAR: <NON_QUOTE_CHAR>
                   | <SINGLE_QUOTE_CHAR>/*6.5.5*/
                   | <DOUBLE_QUOTE_CHAR>/*6.5.5*/
                   | <BACK_QUOTE_CHAR>/*6.5.5*/ <BACK_QUOTE_CHAR>/*6.5.5*/>
| <#NON_QUOTE_CHAR: <GRAPHIC_CHAR>
                 | <ALPHA_NUMERIC_CHAR>
                 | <SOLO_CHAR>
                 | <SPACE_CHAR>
                 | <META_ESCAPE_SEQUENCE>
                 | <CONTROL_ESCAPE_SEQUENCE>
                 | <OCTAL_ESCAPE_SEQUENCE>
                 | <HEXADECIMAL_ESCAPE_SEQUENCE>
                 | "." >
| <#META_ESCAPE_SEQUENCE: <BACKSLASH_CHAR> /* 6.5.5 */
                         <META_CHAR> /* 6.5.5 */ >
| <#CONTROL_ESCAPE_SEQUENCE: <BACKSLASH_CHAR> /* 6.5.5 */
                            <SYMBOLIC_CONTROL_CHAR> /* 6.5.5 */ >
| <#SYMBOLIC_CONTROL_CHAR: <SYMBOLIC_ALERT_CHAR>
                       | <SYMBOLIC_BACKSPACE_CHAR>
                       | <SYMBOLIC_FORM_FEED_CHAR>
                       | <SYMBOLIC_NEW_LINE_CHAR>
                       | <SYMBOLIC_HORIZONTAL_TAB_CHAR>
                       | <SYMBOLIC_VERTICAL_TAB_CHAR>
                       | <SYMBOLIC_CARRIAGE_RETURN_CHAR>>
| <#SYMBOLIC_ALERT_CHAR:          "a">
| <#SYMBOLIC_BACKSPACE_CHAR:      "b">
| <#SYMBOLIC_FORM_FEED_CHAR:      "f">
| <#SYMBOLIC_NEW_LINE_CHAR:       "n">
| <#SYMBOLIC_HORIZONTAL_TAB_CHAR: "t">
| <#SYMBOLIC_VERTICAL_TAB_CHAR:   "v">
| <#SYMBOLIC_CARRIAGE_RETURN_CHAR:"r">
| <#SYMBOLIC_HEXADECIMAL_CHAR:    "x">

| <#OCTAL_ESCAPE_SEQUENCE: <BACKSLASH_CHAR> /* 6.5.5 */
                          (<OCTAL_DIGIT_CHAR>)+ /* 6.5.2 */
                          <BACKSLASH_CHAR> /* 6.5.5 */>

| <#HEXADECIMAL_ESCAPE_SEQUENCE: <BACKSLASH_CHAR> /* 6.5.5 */
                          <SYMBOLIC_HEXADECIMAL_CHAR>
                          (<HEXADECIMAL_DIGIT_CHAR>)+ /* 6.5.2 */
                          <BACKSLASH_CHAR> /* 6.5.5 */>
// 6.4.3 Variables
| <VARIABLE_TOKEN: <ANONYMOUS_VARIABLE>
                 | <NAMED_VARIABLE>>

| <#ANONYMOUS_VARIABLE: <VARIABLE_INDICATOR_CHAR>>

| <#NAMED_VARIABLE: <VARIABLE_INDICATOR_CHAR> (<ALPHA_NUMERIC_CHAR>)+ /* 6.5.2*/
                 | <CAPITAL_LETTER_CHAR>/* 6.5.2*/ (<ALPHA_NUMERIC_CHAR>)*/* 6.5.2*/>
| <#VARIABLE_INDICATOR_CHAR: <UNDERSCORE_CHAR>/* 6.5.2*/>

// 6.4.4 INTEGER NUMBERS + 6.3.2.1 Negative numbers
| <INTEGER_TOKEN: (["-"])? ( <INTEGER_CONSTANT>
                        | <CHARACTER_CODE_CONSTANT>
                        | <BINARY_CONSTANT>
                        | <OCTAL_CONSTANT>
                        | <HEXADECIMAL_CONSTANT>
                        )>
| <#INTEGER_CONSTANT: (<DECIMAL_DIGIT_CHAR>)+ /* 6.5.2 */ >
| <#CHARACTER_CODE_CONSTANT: "0" <SINGLE_QUOTE_CHAR> /* 6.5.2 */
                            <SINGLE_QUOTED_CHAR> /*6.4.2.1*/ >
| <#BINARY_CONSTANT: "0b" (<BINARY_DIGIT_CHAR>)+ /* 6.5.2 */>
| <#OCTAL_CONSTANT: "0o" (<OCTAL_DIGIT_CHAR>)+ /* 6.5.2 */>
| <#HEXADECIMAL_CONSTANT: "0x" (<HEXADECIMAL_DIGIT_CHAR>)+ /* 6.5.2 */>
// 6.4.5 FLOATING POINT NUMBERS
| <FLOAT_NUMBER_TOKEN: (["-"])? <INTEGER_CONSTANT> /* 6.4.4 */
                      <FRACTION>
                      (<EXPONENT>)? >
| <#FRACTION: "." (<DECIMAL_DIGIT_CHAR>)+ /* 6.5.2 */ >
| <#EXPONENT: ["E","e"] (["+","-"])? <INTEGER_CONSTANT> /*6.4.4*/ >
// 6.4.6 CHARACTER CODE LIST
| <CHAR_CODE_LIST_TOKEN: <DOUBLE_QUOTE_CHAR> /* 6.5.5 */
                         (<DOUBLE_QUOTED_ITEM>)*
                         <DOUBLE_QUOTE_CHAR> /* 6.5.5 */>
| <#DOUBLE_QUOTED_ITEM: <DOUBLE_QUOTED_CHAR> /*6.4.2.1*/
                     | <CONTINUATION_ESCAPE_SEQUENCE> /*6.4.2*/ >
// 6.4.7 BACK QUOTED STRING
| <#BACK_QUOTED_STRING: <BACK_QUOTE_CHAR>  /* 6.5.5 */
                       <BACK_QUOTED_ITEM>
                       <BACK_QUOTE_CHAR> /* 6.5.5 */>
| <#BACK_QUOTED_ITEM: <BACK_QUOTED_CHAR>  /*6.4.2.1*/
                  | <CONTINUATION_ESCAPE_SEQUENCE> /*6.4.2*/ >
// 6.4.8 OTHER TOKENS
| <OPEN_TOKEN: <OPEN_CHAR>/*6.5.3*/ >
| <CLOSE_TOKEN: <CLOSE_CHAR> /*6.5.3*/>
| <OPEN_LIST_TOKEN: <OPEN_LIST_CHAR> /*6.5.3*/>
| <CLOSE_LIST_TOKEN: <CLOSE_LIST_CHAR> /*6.5.3*/>
| <OPEN_CURLY_TOKEN: <OPEN_CURLY_CHAR> /*6.5.3*/>
| <CLOSE_CURLY_TOKEN: <CLOSE_CURLY_CHAR> /*6.5.3*/>
| <HEAD_TAIL_SEPARATOR_TOKEN: <HEAD_TAIL_SEPARATOR_CHAR> /*6.5.3*/>
| <COMMA_TOKEN: <COMMA_CHAR> /*6.5.3*/>
| <END_TOKEN: <END_CHAR> >
| <#END_CHAR: ".">
// 6.5 PROCESSOR CHARACTER SET
| <#CHARARCTER: <GRAPHIC_CHAR>       /* 6.5.1 */
             | <ALPHA_NUMERIC_CHAR> /* 6.5.2 */
             | <SOLO_CHAR>          /* 6.5.3 */
             | <LAYOUT_CHAR>        /* 6.5.4 */
             | <META_CHAR>>         /* 6.5.5 */
// 6.5.1 GRAPHIC CHARACTERS
| <#GRAPHIC_CHAR: ["#","$","&","*","+","-",/*".",*/ "/",
                  ":","<","=",">","?","@","^","~"]>
| <#GRAPHIC_CHAR_PERIOD: ["."] | <GRAPHIC_CHAR>>
// 6.5.2 ALPHA NUMRIC CHARACTERS
| <#ALPHA_NUMERIC_CHAR: <ALPHA_CHAR> | <DECIMAL_DIGIT_CHAR>>
| <#ALPHA_CHAR: <UNDERSCORE_CHAR>
             | <LETTER_CHAR> >
| <#LETTER_CHAR: <CAPITAL_LETTER_CHAR>
              | <SMALL_LETTER_CHAR>>
| <#CAPITAL_LETTER_CHAR:    ["A"-"Z"]>
| <#SMALL_LETTER_CHAR:      ["a"-"z"]>
| <#DECIMAL_DIGIT_CHAR:     ["0"-"9"]>
| <#BINARY_DIGIT_CHAR:      ["0","1"]>
| <#OCTAL_DIGIT_CHAR:       ["0"-"7"]>
| <#HEXADECIMAL_DIGIT_CHAR: ["0"-"9","a"-"f","A"-"F"]>
| <#UNDERSCORE_CHAR: "_">
// 6.5.3 Solo characters
| <#SOLO_CHAR: <CUT_CHAR>
            | <OPEN_CHAR>
            | <CLOSE_CHAR>
            | <COMMA_CHAR>
            | <SEMICOLON_CHAR>
            | <OPEN_LIST_CHAR>
            | <CLOSE_LIST_CHAR>
            | <OPEN_CURLY_CHAR>
            | <CLOSE_CURLY_CHAR>
            | <HEAD_TAIL_SEPARATOR_CHAR>
            | <END_LINE_COMMENT_CHAR>>
| <#CUT_CHAR:                "!">
| <#OPEN_CHAR:               "(">
| <#CLOSE_CHAR:              ")">
| <#COMMA_CHAR:              ",">
| <#SEMICOLON_CHAR:          ";">
| <#OPEN_LIST_CHAR:          "[">
| <#CLOSE_LIST_CHAR:         "]">
| <#OPEN_CURLY_CHAR:         "{">
| <#CLOSE_CURLY_CHAR:        "}">
| <#HEAD_TAIL_SEPARATOR_CHAR:"|">
| <#END_LINE_COMMENT_CHAR:   "%">
// 6.5.4 LAYOUT CHARACTERS
| <#LAYOUT_CHAR: <SPACE_CHAR>
              | <NEW_LINE_CHAR>>
| <#SPACE_CHAR:" " | "\t">
| <#NEW_LINE_CHAR:  "\r\n" | "\n\r" | "\n" | "\r">
// 6.5.5 Meta characters
| <#META_CHAR: <BACKSLASH_CHAR>
            | <SINGLE_QUOTE_CHAR>
            | <DOUBLE_QUOTE_CHAR>
            | <BACK_QUOTE_CHAR>>
| <#BACKSLASH_CHAR:"\\">
| <#SINGLE_QUOTE_CHAR:"\'">
| <#DOUBLE_QUOTE_CHAR:"\"">
| <#BACK_QUOTE_CHAR:"`">

}


