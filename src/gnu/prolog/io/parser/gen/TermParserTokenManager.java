/* TermParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TermParserTokenManager.java */
package gnu.prolog.io.parser.gen;
import gnu.prolog.io.parser.*;
import gnu.prolog.term.*;
import gnu.prolog.io.*;
import gnu.prolog.vm.TermConstants;
import gnu.prolog.vm.Environment;
import java.util.*;

/** Token Manager. */
@SuppressWarnings("unused")public class TermParserTokenManager implements TermParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjMoveStringLiteralDfa0_0()
{
   return jjMoveNfa_0(16, 0);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x20000000000000L, 0xff7fffff80000000L
};
static final long[] jjbitVec4 = {
   0x55aaaaaaaaaaaaaaL, 0xd4aaaaaaaaaaab55L, 0xe6512d2a4e243129L, 0xaa29aaaab5555240L
};
static final long[] jjbitVec5 = {
   0x93faaaaaaaaaaaaaL, 0xffffffffffffaa85L, 0xffffffefffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x388a000000000000L, 0xfffff00000010000L, 0x192faaaaaae37fffL
};
static final long[] jjbitVec7 = {
   0xffff000000000000L, 0xaaaaaaaaffffffffL, 0xaaaaaaaaaaaaa802L, 0xaaaaaaaaaaaad554L
};
static final long[] jjbitVec8 = {
   0xaaaaaaaaaaL, 0xfffffffe00000000L, 0xffL, 0x0L
};
static final long[] jjbitVec9 = {
   0xfffffffffffL, 0xfefff80000000000L, 0x7ffffffL, 0x0L
};
static final long[] jjbitVec10 = {
   0xaaaaaaaaaaaaaaaaL, 0xaaaaaaaaaaaaaaaaL, 0xaaaaaaaabfeaaaaaL, 0xaaaaaaaaaaaaaaaaL
};
static final long[] jjbitVec11 = {
   0xff00ff003f00ffL, 0x3fff00ff00ff003fL, 0x40df00ff00ff00ffL, 0xdc00ff00cf00dcL
};
static final long[] jjbitVec12 = {
   0x321080000008c400L, 0x43c0L, 0x10L, 0x0L
};
static final long[] jjbitVec13 = {
   0xffff000000000000L, 0xfda15627fffffffL, 0xaaaaaaaaaaaaaaaaL, 0x8501aaaaaaaaaL
};
static final long[] jjbitVec14 = {
   0x20bfffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec15 = {
   0x0L, 0x2aaaaaaaaaaaL, 0xaaaaaaL, 0x0L
};
static final long[] jjbitVec16 = {
   0xaaabaaa800000000L, 0x95feaaaaaaaaaaaaL, 0x2aa000a50aaL, 0x400000000000000L
};
static final long[] jjbitVec17 = {
   0xf8007fL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec18 = {
   0x0L, 0x7fffffeL, 0x0L, 0x0L
};
static final long[] jjbitVec19 = {
   0x40220002L, 0x0L, 0x2f00000000L, 0x1200000000000000L
};
static final long[] jjbitVec20 = {
   0x10000000000000L, 0x4000L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec21 = {
   0x1L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec22 = {
   0x0L, 0x0L, 0x420040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec23 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x501f0003ffc3L
};
static final long[] jjbitVec24 = {
   0xffffffffffffffffL, 0x3cdfffffffffffffL, 0xfffffffbffffd740L, 0xffbfffffffffffffL
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffcfbL, 0xffffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xfffe00ffffffffffL, 0xfffffffe027fffffL, 0xbffffffffffe00ffL, 0x707ffffff00b6L
};
static final long[] jjbitVec27 = {
   0xffffffff07ff0000L, 0xffffc3ffffffffffL, 0xffffffffffffffffL, 0x9ffffdff9fefffffL
};
static final long[] jjbitVec28 = {
   0xffffffffffff0000L, 0xffffffffffffe7ffL, 0x3ffffffffffffL, 0x43fffffffffffffL
};
static final long[] jjbitVec29 = {
   0x3fffffffffffL, 0xfffffffL, 0x1ffd00000000L, 0x7ffffff000000000L
};
static final long[] jjbitVec30 = {
   0xffffffffffffffffL, 0xfefeffcfffffffffL, 0xf3c5fdfffff99feeL, 0x3ffcfb080799fL
};
static final long[] jjbitVec31 = {
   0xd36dfdfffff987eeL, 0x3fffc05e023987L, 0xf3edfdfffffbbfeeL, 0xffcf00013bbfL
};
static final long[] jjbitVec32 = {
   0xf3edfdfffff99feeL, 0x2ffcfb0c0399fL, 0xc3ffc718d63dc7ecL, 0xffc000813dc7L
};
static final long[] jjbitVec33 = {
   0xe3effdfffffddfeeL, 0xffcf03603ddfL, 0xf3effdfffffddfecL, 0x6ffcf40603ddfL
};
static final long[] jjbitVec34 = {
   0xe7fffffffffddfecL, 0xfc00ffcf00807ddfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec35 = {
   0x7fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0xf3ff3f5fL
};
static final long[] jjbitVec36 = {
   0xc2a003ff03000001L, 0xfffe1ffffffffeffL, 0x1ffffffffeffffdfL, 0x40L
};
static final long[] jjbitVec37 = {
   0xffffffffffffffffL, 0xffffffffffff03ffL, 0xffffffff3fffffffL, 0xf7ffffffffff20bfL
};
static final long[] jjbitVec38 = {
   0xffffffffffffffffL, 0xffffffff3d7f3dffL, 0x7f3dffffffff3dffL, 0xffffffffff7fff3dL
};
static final long[] jjbitVec39 = {
   0xffffffffff3dffffL, 0xe7ffffffL, 0xffffffff0000ffffL, 0x1fffffffffffffL
};
static final long[] jjbitVec40 = {
   0xffffffffffffffffL, 0xffff9fffffffffffL, 0xffffffff07fffffeL, 0x1c7ffffffffffL
};
static final long[] jjbitVec41 = {
   0x1fffff001fdfffL, 0xddfff000fffffL, 0xffffffffffffffffL, 0x3ff308fffffL
};
static final long[] jjbitVec42 = {
   0xffffffff03ff3800L, 0xffffffffffffffL, 0xffff07ffffffffffL, 0x3fffffffffffffL
};
static final long[] jjbitVec43 = {
   0xfff0fff1fffffffL, 0x1f3fffffffffc0L, 0xffff0fffffffffffL, 0x3ff03ffL
};
static final long[] jjbitVec44 = {
   0xffffffff0fffffffL, 0x9fffffff7fffffffL, 0x8003ff03ffL, 0x0L
};
static final long[] jjbitVec45 = {
   0xffffffffffffffffL, 0xff80003ff0fffL, 0xffffffffffffffffL, 0xfffffffffffffL
};
static final long[] jjbitVec46 = {
   0xffffffffffffffL, 0x3fffffffffffe3ffL, 0x0L, 0x7ffffffff70000L
};
static final long[] jjbitVec47 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xf000007fffffffffL
};
static final long[] jjbitVec48 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec49 = {
   0x8000000000000000L, 0x8002000000100001L, 0x1fff0000L, 0x1ffe21fff0000L
};
static final long[] jjbitVec50 = {
   0xf3ffbd503e2ffc84L, 0xffffffff000043e0L, 0x1ffL, 0x0L
};
static final long[] jjbitVec51 = {
   0xffff7fffffffffffL, 0xffffffff7fffffffL, 0xffffffffffffffffL, 0xff81fffffffffL
};
static final long[] jjbitVec52 = {
   0xffff20bfffffffffL, 0x800080ffffffffffL, 0x7f7f7f7f007fffffL, 0xffffffff7f7f7f7fL
};
static final long[] jjbitVec53 = {
   0x800000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec54 = {
   0x1f3efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffee67fffffL, 0xf7ffffffffffffffL
};
static final long[] jjbitVec55 = {
   0xfffe3fffffffffe0L, 0xffffffffffffffffL, 0x7ffffff00007fffL, 0xffff000000000000L
};
static final long[] jjbitVec56 = {
   0x0L, 0x0L, 0x20000000000000L, 0x0L
};
static final long[] jjbitVec57 = {
   0x0L, 0x0L, 0x0L, 0x1000L
};
static final long[] jjbitVec58 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x3fffffffffff0000L
};
static final long[] jjbitVec59 = {
   0xfffffff1fffL, 0xbff0ffffffffffffL, 0xffffffff80ffffffL, 0x3ffffffffffffL
};
static final long[] jjbitVec60 = {
   0xfffffffcff800000L, 0xffffffffffffffffL, 0x7ff000f79ffL, 0xff00000000000000L
};
static final long[] jjbitVec61 = {
   0xffffffffffL, 0xfffffffffffffL, 0xffffffffffffffffL, 0x8ffffff03ff001fL
};
static final long[] jjbitVec62 = {
   0xffff3fffffffffffL, 0x1fffffff000fffffL, 0xffffffffffffffffL, 0x3ff8001L
};
static final long[] jjbitVec63 = {
   0x7fffffffffffffL, 0xc7fffff03ff3fffL, 0xffffffffffffffffL, 0x7cffff38000007L
};
static final long[] jjbitVec64 = {
   0x7f7f007e7e7eL, 0x0L, 0x0L, 0x3ff37ffffffffffL
};
static final long[] jjbitVec65 = {
   0x0L, 0x0L, 0xffff000800000000L, 0xffffffffffff87fL
};
static final long[] jjbitVec66 = {
   0xffffffffffffffffL, 0xffff3fffffffffffL, 0xffffffffffffffffL, 0x3ffffffL
};
static final long[] jjbitVec67 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec68 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec69 = {
   0x18007f0000ffffL, 0xffdf00000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec70 = {
   0x87fffffe03ff0000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec71 = {
   0x0L, 0x0L, 0x0L, 0x7f7fffffL
};
static final long[] jjbitVec72 = {
   0xaa55555555555555L, 0x2b555555555554aaL, 0x11aed2d5b1dbced6L, 0x55d255554aaaa490L
};
static final long[] jjbitVec73 = {
   0x6c05555555555555L, 0x557aL, 0x0L, 0x0L
};
static final long[] jjbitVec74 = {
   0x0L, 0x45000000000000L, 0xffbfffed740L, 0xe6905555551c8000L
};
static final long[] jjbitVec75 = {
   0xffffffffffffL, 0x5555555500000000L, 0x5555555555555401L, 0x5555555555552aabL
};
static final long[] jjbitVec76 = {
   0xfffe005555555555L, 0x7fffffL, 0x0L, 0x0L
};
static final long[] jjbitVec77 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x20bfL
};
static final long[] jjbitVec78 = {
   0x5555555555555555L, 0x5555555555555555L, 0x5555555540155555L, 0x5555555555555555L
};
static final long[] jjbitVec79 = {
   0xff00ff003f00ff00L, 0xff00aa003f00L, 0xf00000000000000L, 0xf001f000f000f00L
};
static final long[] jjbitVec80 = {
   0xc00f3d503e273884L, 0x20L, 0x8L, 0x0L
};
static final long[] jjbitVec81 = {
   0x7fffffffffffL, 0xc025ea9d00000000L, 0x5555555555555555L, 0x4280555555555L
};
static final long[] jjbitVec82 = {
   0x0L, 0x155555555555L, 0x555555L, 0x0L
};
static final long[] jjbitVec83 = {
   0x5554555400000000L, 0x6a00555555555555L, 0x55500052855L, 0x0L
};
static final long[] jjbitVec84 = {
   0x7fffffe00000000L, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 94;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0xf400ac5800000000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAdd(36); }
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     { jjCheckNAddStates(3, 7); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 59)
                        kind = 59;
                     { jjCheckNAdd(84); }
                  }
                  else if (curChar == 44)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  else if (curChar == 41)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(8, 10); }
                  else if (curChar == 33)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if (curChar == 59)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(11, 13); }
                  else if (curChar == 37)
                     { jjCheckNAddStates(14, 16); }
                  if (curChar == 45)
                     { jjCheckNAddStates(17, 20); }
                  else if (curChar == 48)
                     { jjAddStates(21, 23); }
                  else if (curChar == 13)
                     { jjCheckNAdd(13); }
                  else if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 0:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 42)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 3:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 2); }
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 2); }
                  break;
               case 5:
                  if (curChar != 47)
                     break;
                  if (kind > 1)
                     kind = 1;
                  { jjCheckNAddStates(3, 7); }
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 7:
                  if (curChar == 37)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 8:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 9:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  { jjCheckNAddStates(3, 7); }
                  break;
               case 10:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  { jjCheckNAddStates(3, 7); }
                  break;
               case 11:
                  if (curChar != 13)
                     break;
                  if (kind > 1)
                     kind = 1;
                  { jjCheckNAddStates(3, 7); }
                  break;
               case 12:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar != 10)
                     break;
                  if (kind > 1)
                     kind = 1;
                  { jjCheckNAddStates(3, 7); }
                  break;
               case 14:
               case 15:
                  if (curChar == 13)
                     { jjCheckNAdd(13); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if (curChar == 39)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 19:
                  if ((0xffffff7f00000200L & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 21:
                  if (curChar == 10)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 22:
                  if (curChar != 39)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 23:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (curChar == 13)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 25:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(30, 29); }
                  break;
               case 32:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 33:
                  if (curChar == 59 && kind > 6)
                     kind = 6;
                  break;
               case 34:
                  if (curChar == 33 && kind > 6)
                     kind = 6;
                  break;
               case 35:
                  if ((0xf400ac5800000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(36); }
                  break;
               case 36:
                  if ((0xf400ec5800000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(36); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if (curChar == 39)
                     { jjAddStates(27, 29); }
                  break;
               case 41:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if (curChar == 39 && kind > 38)
                     kind = 38;
                  break;
               case 43:
                  if ((0xffffff7f00000200L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(46, 47); }
                  break;
               case 48:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(48, 47); }
                  break;
               case 50:
                  if ((0x8400000000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 51:
                  if (curChar == 34)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 52:
                  if ((0xfffffffb00000200L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 54:
                  if (curChar == 10)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 55:
                  if (curChar != 34)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 56:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if (curChar == 13)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 58:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 63:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(63, 62); }
                  break;
               case 65:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 66:
                  if (curChar == 40 && kind > 51)
                     kind = 51;
                  break;
               case 67:
                  if (curChar == 41 && kind > 52)
                     kind = 52;
                  break;
               case 73:
                  if (curChar == 44 && kind > 58)
                     kind = 58;
                  break;
               case 74:
                  if (curChar == 48)
                     { jjAddStates(21, 23); }
                  break;
               case 76:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 83:
                  if (curChar != 46)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(84); }
                  break;
               case 84:
                  if ((0xf400ac5800000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(84); }
                  break;
               case 85:
                  if (curChar == 45)
                     { jjCheckNAddStates(17, 20); }
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAdd(86); }
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(87, 88); }
                  break;
               case 88:
                  if (curChar == 46)
                     { jjCheckNAdd(89); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(89, 90); }
                  break;
               case 91:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(92); }
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAdd(92); }
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(38); }
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAdd(17); }
                  }
                  else if ((0x4000000050000001L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAdd(36); }
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(82); }
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 56)
                        kind = 56;
                  }
                  else if (curChar == 123)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  else if (curChar == 93)
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  else if (curChar == 91)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  break;
               case 1:
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 3:
               case 4:
                  { jjCheckNAddTwoStates(4, 2); }
                  break;
               case 8:
                  { jjAddStates(14, 16); }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(17); }
                  break;
               case 19:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 20:
                  if (curChar == 92)
                     { jjAddStates(30, 36); }
                  break;
               case 27:
                  if (curChar == 120)
                     { jjCheckNAdd(28); }
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 29:
                  if (curChar == 92)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 31:
                  if ((0x54404600000000L & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 32:
                  if ((0x110000000L & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 35:
               case 36:
                  if ((0x4000000050000001L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(36); }
                  break;
               case 37:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(38); }
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(38); }
                  break;
               case 43:
                  if ((0x7fffffffefffffffL & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 44:
                  if (curChar == 92)
                     { jjAddStates(37, 40); }
                  break;
               case 45:
                  if (curChar == 120)
                     { jjCheckNAdd(46); }
                  break;
               case 46:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(46, 47); }
                  break;
               case 47:
                  if (curChar == 92 && kind > 38)
                     kind = 38;
                  break;
               case 49:
                  if ((0x54404600000000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 50:
                  if ((0x110000000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 52:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 53:
                  if (curChar == 92)
                     { jjAddStates(41, 47); }
                  break;
               case 60:
                  if (curChar == 120)
                     { jjCheckNAdd(61); }
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 62:
                  if (curChar == 92)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 64:
                  if ((0x54404600000000L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 65:
                  if ((0x110000000L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 68:
                  if (curChar == 91 && kind > 53)
                     kind = 53;
                  break;
               case 69:
                  if (curChar == 93 && kind > 54)
                     kind = 54;
                  break;
               case 70:
                  if (curChar == 123 && kind > 55)
                     kind = 55;
                  break;
               case 71:
                  if (curChar == 125 && kind > 56)
                     kind = 56;
                  break;
               case 72:
                  if (curChar == 124 && kind > 57)
                     kind = 57;
                  break;
               case 75:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 77:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 79:
                  if (curChar == 120)
                     { jjCheckNAdd(80); }
                  break;
               case 80:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAdd(80); }
                  break;
               case 81:
                  if (curChar != 95)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(82); }
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(82); }
                  break;
               case 84:
                  if ((0x4000000050000001L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 90:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(48, 49); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAdd(17); }
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(38); }
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 3:
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(4, 2); }
                  break;
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(14, 16); }
                  break;
               case 17:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(17); }
                  break;
               case 37:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(38); }
                  break;
               case 38:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(38); }
                  break;
               case 82:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjstateSet[jjnewStateCnt++] = 82;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 94 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   86, 87, 88, 6, 7, 10, 12, 14, 52, 53, 55, 19, 20, 22, 8, 9, 
   15, 86, 39, 87, 74, 75, 77, 79, 2, 3, 5, 41, 43, 44, 23, 25, 
   26, 27, 30, 31, 32, 45, 48, 49, 50, 56, 58, 59, 60, 63, 64, 65, 
   91, 92, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec18[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec62[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec63[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec67[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec68[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec69[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec70[i2] & l2) != 0L);
      default :
         if ((jjbitVec20[i1] & l1) != 0L)
            if ((jjbitVec21[i2] & l2) == 0L)
               return false;
            else
            return true;
         if ((jjbitVec19[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec71[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec72[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec73[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec74[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec75[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec76[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec77[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec78[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec79[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec80[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec81[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec82[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec83[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec84[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = gnu.prolog.io.parser.TokenFactory.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public TermParserTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public TermParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 94; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xff8904400000041L, 0x0L, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x2L, 0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[94];
    private final int[] jjstateSet = new int[2 * 94];

    
    protected char curChar;
}
