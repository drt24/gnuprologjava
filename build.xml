<?xml version="1.0"?>

<!--
Ant Buildfile for GNU Prolog for Java.
 Copyright (C) 1997-1999  Constantine Plotnikov,
 Copyright (C) 2009       Michiel Hendriks,
 Copyright (C) 2010       Daniel Thomas
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 3 of the License, or (at your option) any later version.
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA  02111-1307, USA. The text of license can be also found 
 at http://www.gnu.org/copyleft/lgpl.html 
-->

<project name="gnuprologjava" default="build">

	<target name="init">
		<loadproperties srcFile="src/gnu/prolog/version.properties">
			<filterchain>
				<deletecharacters chars=" \t" />
			</filterchain>
		</loadproperties>

		<property file="build.properties" />

		<property name="name.friendly" value="GNU Prolog for Java" />
		<property name="url.website" value="http://www.gnu.org/software/gnuprologjava/" />

		<property name="version" value="${gnu.prolog.version.major}.${gnu.prolog.version.minor}.${gnu.prolog.version.revision}" />
		<property name="ant.build.javac.target" value="1.6" />
		<property name="ant.build.javac.source" value="1.6" />

		<property name="java.debug" value="off" />

		<property name="javacc.debug" value="false" />
		<property name="javacc.home" value="/usr/share/java" />

		<property name="test.concurrency.threads" value="1" />
		<property name="test.concurrency.iterations" value="1" />

		<!-- Key id to use for signing the .deb files -->
		<property name="dist.keyid" value="" />
		<property name="dist.name-version" value="${ant.project.name}-${version}" />
		<property name="dist.debian.name_version" value="gnuprolog-java_${version}" />
		<property name="dist.debdir" value="dist/${dist.name-version}/" />

		<mkdir dir="build" />
		<mkdir dir="dist" />

	</target>

	<target name="clean" depends="clean-test" description="Clean all generated content">
		<delete dir="build" />
		<delete dir="dist" />
	</target>

	<target name="build" depends="jar,doc" description="Build all the sources" />

	<target name="rebuild" depends="clean,build" description="Perform a clean rebuild of the project" />

	<target name="jar" depends="compile">
		<jar destfile="build/${dist.name-version}.jar" basedir="build/code">
			<manifest>
				<attribute name="Main-Class" value="gnu.prolog.test.GoalRunner" />
				<section name="gnu/prolog/">
					<attribute name="Specification-Title" value="${name.friendly}" />
					<attribute name="Specification-Version" value="${version}" />
					<attribute name="Specification-Vendor" value="${url.website}" />
					<attribute name="Implementation-Vendor" value="${url.website}" />
					<attribute name="Implementation-Version" value="${version}" />
					<attribute name="Implementation-Title" value="${name.friendly}" />
				</section>
			</manifest>
		</jar>
	</target>

	<target name="compile" depends="init">
		<mkdir dir="build/code" />
		<javac srcdir="src" destdir="build/code"
		       includeantruntime="false"
                       fork="true"
		       classpath="${java.class.path}:/usr/share/java/gnu-getopt.jar"
		       debug="${java.debug}" debuglevel="lines,vars,source"
		       excludes="**/package-info.java" >
                  <compilerarg value="-J-Xss2M"/>
                </javac>
		<copy todir="build/code">
			<fileset dir="src">
				<include name="**/*.pro" />
				<include name="**/*.properties" />
			</fileset>
		</copy>
	</target>

	<target name="dist" depends="build,doc,generate-changelog" description="Produce a release zip file of the .jar and the api">
		<zip destfile="dist/${dist.name-version}.zip">
			<fileset dir="build">
				<include name="${dist.name-version}.jar" />
				<include name="api/**" />
				<include name="demo/**" />
				<include name="manual/**" />
				<include name="manual.info" />
			</fileset>
			<fileset dir="docs">
				<include name="readme.txt" />
				<include name="COPYING.txt" />
				<include name="COPYING.LIBRARY.txt" />
				<include name="*.texinfo" />
			</fileset>
			<fileset dir="${basedir}">
				<include name="NEWS.txt" />
				<include name="key-signing-key.asc" />
				<include name="generate-ChangeLog.sh" />
			</fileset>
			<fileset dir="dist">
				<include name="ChangeLog" />
			</fileset>
		</zip>
	</target>

	<target name="dist-src" depends="init,generate-changelog" description="Produce a zip of the source">
		<zip destfile="dist/${dist.name-version}-src.zip">
			<fileset dir="${basedir}">
				<include name="src/**" />
				<include name="build.xml" />
				<include name="NEWS.txt" />
				<include name="key-signing-key.asc" />
				<include name="generate-ChangeLog.sh" />
				<include name="docs/readme.txt" />
				<include name="docs/*.texinfo" />
				<include name="docs/COPYING.txt" />
				<include name="docs/COPYING.LIBRARY.txt" />
				<include name="debian/**" />
			</fileset>
			<fileset dir="dist">
				<include name="ChangeLog" />
			</fileset>
		</zip>
	</target>

	<target name="dist-deb" depends="dist-src" description="Produce a .deb to install with">
		<!-- Delete the old directory if it exists before unziping the new one -->
		<delete dir="${dist.debdir}" failonerror="false" />
		<unzip src="dist/${dist.name-version}-src.zip" dest="${dist.debdir}" />
		<!-- Delete the getopt code as we want to use the libgetopt-java package for that -->
		<delete dir="${dist.debdir}src/gnu/getopt" />
		<tar destfile="dist/${dist.debian.name_version}.orig.tar.gz" basedir="${dist.debdir}" excludes="debian/**" compression="gzip" />
		<exec executable="dpkg-buildpackage" dir="${dist.debdir}">
			<arg value="-k${dist.keyid}" />
			<arg value="-sa" />
		</exec>
		<exec executable="lintian" dir="dist">
			<arg value="-i" />
			<arg value="-I" />
			<arg value="--show-overrides" />
			<arg value="${dist.debian.name_version}-1_i386.changes" />
		</exec>
	</target>

	<target name="generate-changelog" depends="init">
		<copy file="ChangeLog" todir="dist" />
		<exec executable="${basedir}/generate-ChangeLog.sh">
			<arg value="${basedir}" />
			<arg value="dist" />
		</exec>
	</target>

	<target name="doc" depends="init,manual" description="Make the javadoc api and copy the demo applications">
		<mkdir dir="build/api" />
		<javadoc sourcepath="src" destdir="build/api" version="yes" author="yes"
			use="yes" classpath="${java.class.path}:/usr/share/java/gnu-getopt.jar">
			<packageset dir="src">
				<include name="gnu/prolog/**" />
			</packageset>
			<header>
				&lt;a href="${url.website}" target="_top"&gt;${name.friendly}&lt;/a&gt;
			</header>
			<footer>
				&lt;a href="${url.website}" target="_top"&gt;${name.friendly}&lt;/a&gt;
			</footer>
			<link href="http://java.sun.com/javase/6/docs/api/" />
		</javadoc>
		<mkdir dir="build/demo" />
		<copy todir="build/demo/gnu/prolog/">
			<fileset dir="src/gnu/prolog/demo" />
		</copy>
	</target>

	<target name="manual" depends="init,manual-html,manual-info" />

	<target name="manual-html" depends="init">
		<exec executable="makeinfo">
			<arg value="--html" />
			<arg value="docs/manual.texinfo" />
			<arg value="--output=build/manual" />
		</exec>
	</target>
	<target name="manual-info" depends="init">
		<exec executable="makeinfo">
			<arg value="docs/manual.texinfo" />
			<arg value="--output=build/manual.info" />
		</exec>
		<exec executable="ln" dir="build">
			<arg value="-s" />
			<arg value="manual.info" />
			<arg value="gnuprolog-java.info" />
		</exec>
	</target>

	<target name="test" depends="compile,test-inriasuite,test-vanilla,test-modules" description="Execute tests"/><!--,test-dcg -->

	<target name="clean-test" depends="clean-vanilla,clean-inria,clean-dcg,clean-modules"/>

	<target name="test-vanilla" depends="compile">
		<echo>Verify output in test/test-vanilla.out
Expect: "sec74.pl:LL:CC: predicate is not discontiguous" this is supposed to happen.</echo>
		<java classname="gnu.prolog.test.GoalRunner" dir="test/vanilla" fork="true" logerror="true" output="test/test-vanilla.out">
			<arg value="--once" />
			<arg value="gnuprologjava.pl" />
			<arg value="validate" />
			<classpath>
				<pathelement location="build/code/" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
	</target>
	<target name="clean-vanilla">
		<delete file="test/test-vanilla.out" failonerror="false" />
		<delete failonerror="false">
			<fileset dir="test/vanilla/" includes="*.tmp,*.bin,*.out" />
		</delete>
	</target>
	<target name="test-inriasuite" depends="compile">
		<echo>Verify output in test/test-inria.out</echo>
		<java classname="gnu.prolog.test.GoalRunner" dir="test/inriasuite" fork="true" logerror="true" output="test/test-inria.out">
			<arg value="--once" />
			<arg value="--threads=${test.concurrency.threads}" />
			<!-- This results in rather messy output if set to >1 but is still useful. -->
			<arg value="--iterations=${test.concurrency.iterations}" />
			<arg value="inriasuite.pl" />
			<arg value="run_all_tests" />
			<classpath>
				<pathelement location="build/code/" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
		<exec executable="grep">
			<arg value="* BIPs gave" />
			<arg value="test/test-inria.out" />
		</exec>
	</target>
	<target name="clean-inria">
		<delete file="test/test-inria.out" failonerror="false" />
		<delete failonerror="false">
			<fileset dir="test/inriasuite/io/" includes="*.tmp" />
		</delete>
	</target>
	<target name="test-dcg" depends="compile">
		<echo>Verify output in test/test-dcg.out</echo>
		<java classname="gnu.prolog.test.GoalRunner" dir="test/extending/DCG" fork="true" logerror="true" output="test/test-dcg.out">
			<arg value="--once" />
			<arg value="test_cases.pl" />
			<arg value="test_gr_preds,test_gr_tr" />
			<classpath>
				<pathelement location="build/code/" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
	</target>
	<target name="clean-dcg">
		<delete file="test/test-dcg.out" failonerror="false" />
	</target>
	<target name="test-modules" depends="compile">
		<echo>Verify output in test/test-modules.out</echo>
		<java classname="gnu.prolog.test.GoalRunner" dir="test/extending/modules" fork="true" logerror="true" output="test/test-modules.out">
			<arg value="--once" />
			<arg value="test_with_modules.pl" />
			<arg value="test" />
			<classpath>
				<pathelement location="build/code/" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
	</target>
	<target name="clean-modules">
		<delete file="test/test-modules.out" failonerror="false" />
	</target>
	

	<!-- Dangerous Regenerate the parser. WARNING: This may BREAK the parser. Use with Care.-->
	<target name="regenerate-parser" depends="init">
		<javacc target="src/gnu/prolog/io/parser/TermParser.jj"
			outputdirectory="src/gnu/prolog/io/parser/gen/"
			jdkversion="1.6" javacchome="${javacc.home}" debugparser="${javacc.debug}" />
	</target>
</project>

