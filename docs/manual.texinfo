\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename manual.info
@include version.texinfo
@settitle GNU Prolog for Java @value{VERSION} Manual
@c %**end of header

@dircategory GNU Libraries
@direntry
* Prolog for Java: (gnuprologjava). GNU Prolog for Java manual.
@end direntry


@copying
This manual is for GNU Prolog for Java @value{VERSION},
which is a Java library for utilising Prolog.

Copyright @copyright{} 2010 Daniel Thomas

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Lesser General Public License, Version 3 or
any later version published by the Free Software Foundation.
@end quotation

@end copying


@titlepage
@title GNU Prolog for Java
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Daniel Thomas @email{info-gnuprolog@@gnu.org}
@author Rishabh Garg
@insertcopying
@end titlepage
@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top
@top GNU Prolog for Java

This manual is for GNU Prolog for Java (version @value{VERSION}, @value{UPDATED}).
@end ifnottex

@menu
* Overview:: Getting started with GNU Prolog for Java
* Using the API:: Loading prolog code, constructing questions and getting answers
* Installation:: Instructions on how to install GNU Prolog for Java
* Extending:: Instructions on how to extend GNU Prolog for Java
* Contributing:: Instructions on how user could contribute to GNU Prolog For Java
* GNU Lesser General Public License::
* Index::
@end menu

@node Overview
@chapter Overview

GNU Prolog for Java (GPJ) is a Java library (gnu.prolog) which allows the use of Prolog from within Java applications that need Prolog to solve some tasks. The interpreter intended for applications where Prolog performs combinatorial search and Java does the rest. The library allows for easy communication between Java and Prolog. Suppose, In the context of a Java application you would like to use Prolog for a particular task. You should probably be using GNU Prolog For Java. It supports part 1 of the ISO standard for Prolog with some extensions. The goals or rules can be written using Unicode input, details about which can be found in unicode.txt. It is licensed under the LGPLv3, which can be found in the COPYING and COPYING.LIBRARY files distributed with GNU Prolog for Java (GPJ) and published by the Free Software Foundation.

For normal usage there are only a few classes that you will need to interact with:
@itemize @bullet
@item 
@strong{gnu.prolog.vm.Environment} which provides the core of the prolog environment. It represents the prolog processor.
@item
@strong{gnu.prolog.vm.Interpreter} which is what you use to run your prolog queries.
@item
@strong{gnu.prolog.term package} which contains the various types of Prolog terms which exist and which you use to construct your prolog questions if you want answers (beyond RC.SUCCESS, RC.SUCCESS_LAST and RC.FAIL).
@end itemize
@sp 2
@itemize @arrow
@item
The use of the API is explained in the next chapter: @ref{Using the API}.
@item
If you wish to install GPJ then instructions are provided in the @ref{Installation} chapter.
@item
If you wish to extend GPJ by writing your own predicates (for example to allow prolog code to make calls into your Java code) then see the chapter on @ref{Extending} GPJ.
@item
Further documentation is provided in the README file and changes brought about by new versions will be detailed in the NEWS file.
@item
The @uref{http://www.gnu.org/software/gnuprologjava/api/} java API has javadoc based documentation.
@item
The gnu.prolog.demo package contains various example programs which use the API.
@end itemize


@node Using the API
@chapter Using the API
@menu
* Setup:: Setting up the VM to run
* Constructing Terms:: Constructing questions to ask
* Complete Example:: An example to read predicates from a file and execute them
@end menu
You may also find the demo programs in gnu.prolog.demo which are distributed with the docs useful in showing the use of the API. The basic usage is quite simple if you are already familiar with both Prolog and Java.

@node Setup, Constructing Terms, Using the API, Using the API
@section Setup
First construct a @emph{gnu.prolog.vm.Environment} which is the core of the VM using @code{new Environment()}. Say the name we use for the Environment we create is `environment'. 

@code{gnu.prolog.vm.Environment environment = new Environment();}
@sp 1
Then load any prolog files you want to which define additional predicates etc. using @code{environment.ensureLoaded(AtomTerm.get(``URl of file''))} for each file. The file can contain facts, rules, clauses, etc. and these files can have any kind of Unicode input. Make sure you save the file in Unicode(UTF-8) format. Also, it is good practice to have the extension of such files @code{.pl}. Though if you already have a @emph{gnu.prolog.vm.AtomTerm} representation of the file then you can use that but reading predicates from a file is simpler.
Instances of Terms should be got using their relevant @code{get(Type)} methods as we ensure only one @emph{gnu.prolog.term.Term} instance for each distinct object they represent.
@sp 1
Then you will need to create at least one gnu.prolog.vm.Interpreter which is used to execute goals. You do this using @code{environment.createInterpreter()}. You might want multiple Interpreters if you want to run goals in multiple threads. You will not be able to execute the goals without an interpreter and this step is essential. Say the name we use for the Interpreter we create is `interp'.

@code{gnu.prolog.vm.Interpreter interp = environment.createInterpreter();}
@sp 1

Having created it you need to use it to run the initialization of any files you have loaded by using @code{environment.runInitialization(interpreter);}. This ensures the goals contained in any ``:- initialization(goal).'' or ``:- goal.''s in the files you have loaded are run.
@sp 1
At this point the setup is completed and you can start running goals. This is done using @code{interpreter.runOnce(Term);} where Term is the goal you want to execute. This does one execution of the goal and then stops.

The construction of Terms is explained in the next section. If you need something more complex than that then you will need to use @code{goal = interpreter.prepareGoal(goalTerm); RC rc = interpreter.execute(goal)} and then depending on the value of rc possibly run @code{execute(goal)} again. If you stop running @code{execute(goal)} while rc is still RC.SUCCESS then you need to run @code{interpreter.stop(goal)}.

@node Constructing Terms
@section Constructing Terms
Terms are contained in the @emph{gnu.prolog.term} package. They all extend Term and there are three basic types: @code{VariableTerm}s, @code{CompoundTerm}s and @code{AtomicTerm}s (including @code{AtomTerm}, @code{FloatTerm}, @code{IntegerTerm}).
@sp 1
@code{VariableTerm}s are used to represent prolog variables which are written as `A' or `X' in Prolog. Variable Terms start with a capital letter. During execution a VariableTerm may become unified with some other Term. To extract the value from a VariableTerm after execution use the #dereference() method (which is implemented by Term) which finds the value which may lie at the end of an arbitary long chain of VariableTerms. There is a subclass of @code{VariableTerm}: @code{ChangeableTerm} which is used for Terms the value of which varies depending on the value of Prolog flags. This is currently used only for the @code{double_quotes} flag. The value of a @code{ChangeableTerm} is updated when the #dereference() method is called. A VariableTerm can be constructed using either the @code{VariableTerm()} or the @code{VariableTerm(``VariableName'')} constructors, the second is preferable as it helps when debugging to know which VariableTerm is which.
@sp 1
@code{CompoundTerm}s are the mechanism by which terms can be combined together and are the basic component of everything from lists to relations. They consist of a @code{CompoundTermTag} which contains the functor such as the `foo' in `foo(a,b)' or the `.' in `[a,b,c]' (by the representation of lists in Prolog) and the arity (number of arguments) such as 2 in the foo case above. This leads to the notation of foo/2 for a term with a functor of foo and an arity of 2. A @code{CompoundTerm} also has an array of arguments (@code{Term[]}). There are a variety of different constructors but @code{CompoundTerm(AtomTerm functor, Term[] args)}, @code{CompoundTerm(String functor, Term[] args)} which provide the functor and the arguments are useful. Suppose you have @code{b(12).} in your prolog goal file. Now, you can create a compound term b(X) using:

@code{VariableTerm term = new VariableTerm("X");}

@code{Term[] ter = new Term[1];}

@code{ter[0] = term;}

@code{CompoundTerm comp = new CompoundTerm("b",ter);}

And finally you can find the value of X by executing the goal and running

@code{Term answer = term.dereference()};
@sp 1
@code{AtomicTerm}s extend the abstract @code{AtomicTerm} class and are used for representing constants such as Strings and chars (@code{AtomTerm}); Numbers (@code{NumericTerm}) including doubles (@code{FloatTerm}) and integers (@code{IntegerTerm}) and finally Java Objects which can be embedded using @code{JavaObjectTerm}s. @code{AtomTerm} and @code{IntegerTerm} have static get(Type) methods rather than constructors while FloatTerm and JavaObjectTerm have normal constructors.

For example 

(using 
@code{gnu.prolog.demo.mentalarithmetic.MentalArithmetic}

@code{#generateQuestion(int limit, int length)}: 
@example
// Construct the question
// Create variable terms so that we can pull the answers out later
VariableTerm listTerm = new VariableTerm("List");
VariableTerm answerTerm = new VariableTerm("Answer");
// Create the arguments to the compound term which is the question
Term[] args = @{new IntegerTerm(limit), new IntegerTerm(length), listTerm, answerTerm@};
// Construct the question
CompoundTerm goalTerm = 
				new CompoundTerm(AtomTerm.get("arithmetic"),args);
@end example

@node Complete Example
@section Complete Example
@example
import gnu.prolog.term.AtomTerm;
import gnu.prolog.term.CompoundTerm;
import gnu.prolog.term.Term;
import gnu.prolog.term.VariableTerm;
import gnu.prolog.vm.Environment;
import gnu.prolog.vm.Interpreter;
import gnu.prolog.vm.PrologException;
/*
* Create an Environment environment (gnu.prolog.vm.Environment) 
* which provides the core of the prolog environment
*/
Environment environment = new Environment();
/*
* Then load any prolog files you want to which define additional predicates
* Say the file contains: 
* b(Z) :- a(Z).
* a(12).
*/
environment.ensureLoaded(AtomTerm.get(Some file));
/*
* Create an Interpreter `interp' to execute goals. 
* You need at least one in your program
*/
Interpreter interp = environment.createInterpreter();
environment.runInitialization(interp);
/* 
* Set a goal b(X) by defining 
* A variable term X
* A compound term with functor b and arguments X
*/
VariableTerm term = new VariableTerm("X");
Term[] ter = new Term[1];
ter[0] = term;
CompoundTerm comp = new CompoundTerm("b",ter);
/*
* Run the interpreter on the compound term b(X)
*/
interp.runOnce(comp);
/* 
* Value of X gets matched after running the goal 
* Can be found by using #dereference method
*/
System.out.println(term.dereference()); 
@end example
@sp 1
The last line of code will print a 12 on the terminal/console.

@node Installation
@chapter Installation
If you download the jar file according to the instructions on the @uref{http://www.gnu.org/software/gnuprologjava/} GNU Prolog for Java website and put it in your path then installation should be complete. Best way to contribute at the same time to the project is to import the downloaded zip as an archive file and then create files in a default package.

It is our intention that GNU Prolog for Java be shipped with various distributions notably Debian and also the distributions approved of by GNU. At time of writing this had not been done except for the creation of a debian package. Assistance in doing this is appricated.
@c MAY-NEED-UPDATE

@node Extending
@chapter Extending

@menu
* Creating new predicates:: instructions on how to create new predicates to allow prolog code to make calls into java code.
* Adding more Prolog functionality:: instructions on how further functionality can be added to the Prolog environment by loading additional Prolog files.
@end menu

@node Creating new predicates
@section Creating new predicates
GPJ is easily extendible by creating new java predicates such as those in @emph{gnu.prolog.vm.builtins}. They need to implement @code{gnu.prolog.vm.PrologCode}. @code{gnu.prolog.vm.ExecuteOnlyCode} is provided for convenience as most will not need to implement the @code{install} or @code{uninstall} methods.
@c TODO

@node Adding more Prolog functionality
@section Adding more Prolog functionality
If you wish to add further Prolog functionality, for example to support golog or to add support for DCGs then this can be done by loading the relevant Prolog files.
@menu
* Golog:: Using Prolog for situation calculus.
* Definite clause grammar (DCG):: Support for part 3 of the ISO Prolog standard (ISO/IEC DTR 13211-3:2006) ``provide convenient and simple functionality for parsing and processing text in a variety of languages.''
* Modules:: Support for modular code
* Multiprecision Arithmetic:: Support for very large integers and rationals
* Non-ISO arithmetic:: Support for arithemtic operations outside of ISO specifications
@end menu

@node Golog
@subsection Golog
The Cognitive Robotics Group at the University of Toronto provides a prolog file providing support for the Golog language for situation calculus (an extension of Prolog). @uref{http://www.cs.toronto.edu/cogrobo/main/systems/index.html}.
This has not yet been tested to determine whether it works with GPJ. @c TODO test whether it works
Should you have difficulty finding this file then Daniel Thomas may be able to help.

@node Definite clause grammar (DCG)
@subsection Definite clause grammar (DCG)
The ISO working group on the Prolog standard publishes a reference implementation of the part 3 draft which it should be possible to load as with any other Prolog file. @uref{http://www.sju.edu/~jhodgson/wg17/Drafts/DCGs/reference_implementation}. Should you have difficulty finding it, it is also in the git repository for GPJ.
This should then provide support for part 3 of the standard. This currently does not work as it depends on some of the 2006 ISO extensions which we should have implemented for 0.3.0.

@node Modules
@subsection Module support in GPJ
GPJ supports SWI-Prolog-style modules. A single file can define 0..N modules, using the directive :-module/2. The first argument is the name of the module you would like to define, and must be an atom. The second argument is a list of predicate indicators which comprise the exported predicates - those accessible to other modules. By default, code is compiled into the module 'user' - if you never use the :-module/2 directive, this is where all your code will end up.

A meta-predicate :/2 is provided to call code directly in other modules. The first argument is the name of the module, the second is the goal. Doing this changes the value of the current module to the named one, then executes the goal directly.

When compiling a module, shims are installed in user for exported predicate. Suppose you export foo/3 from your module bar. This will result in the following predicate being created in the user module:
@code{foo(A,B,C):- bar:foo(A,B,C).}

The final element that is required for the module system is the fallback to the user module. If the currently executing code tries to call a predicate which is not defined in the current module, it will not decide that the predicate is undefined until it has further checked the user module. Continuing the example above, that means that if you are executing code in a module qux, and call foo(a,b,c) then - assuming there is not a foo/3 also defined in qux, which would take preference - the foo/3 definition in user would be used. This would call :/2, changing the current module to bar, then call foo/3 again, only this time the definition of the exported predicate would be found and executed. The current module is implemented via a stack, and manages restoring the state on backtrack as well as popping modules off the top once the :/2 goal has completed.

@node Multiprecision Arithmetic
@subsection Large Integers and Rationals
If gnu.prolog.vm.Evaluate.isUnbounded is set to true then:
@itemize @bullet
   @item The prolog flag bounded will be set to false, and the max_integer and min_integer flags will be destroyed
   @item Integers outside the range of Java's int type will be stored as BigIntegers. The backing term for this is a BigIntegerTerm
   @item The evaluables rdiv/2, rational/1 and rationalize/1 are made available. These produce terms of type RationalTerm
   @item Arithmetic is extended to accept RationalTerm and BigIntegerTerm types where possible.
   @itemize @bullet
      @item integer_overflow is no longer possible except for **/2
      @item float_overflow is still possible for evaluable functions that first convert the argument to a float
   @end itemize
@end itemize
If it is not set to true then:
@itemize @bullet
   @item A large integer appearing in source will result in a compile error
@end itemize

The following evaluable functions will accept any type:
@itemize @bullet
   @item  +/2
   @item  -/2
   @item  */2
   @item  ///2
   @item  div/2 (see the section on non-ISO arithmetic)
   @item  //2
   @item  -/1
   @item  abs/1
   @item  sign/1
   @item  float/1
   @item  rdiv/2
@end itemize

The following evaluable functions will accept any type of integer:
@itemize @bullet
   @item  rem/2
   @item  mod/2
   @item  >>/1
   @item  <</1
   @item  /\/1
   @item  \//1
   @item  \+/1
   @item  gcd/2 (see the section on non-ISO arithmetic)
@end itemize

The following evaluable functions will accept any term if non-ISO arithmetic is enabled, and any integer type otherwise:
@itemize @bullet
   @item  float_integer_part/1
   @item  float_fractional_part/1
   @item  floor/1
   @item  truncate/1
   @item  round/1
   @item  ceiling/
@end itemize

The following evaluable functions will only accept a type in the range of a double:
@itemize @bullet
   @item  sqrt/1
   @item  sin/1
   @item  cos/1
   @item  atan/1
   @item  exp/1
   @item  rationalize/1
   @item  rational/1
@end itemize

The following evaluable functions will only accept a type in the range of a int:
@itemize @bullet
   @item  random/1
@end itemize

**/2 is more restrictive:
@itemize @bullet
   @item  If the first arg is a float, or the second argument is either a rational or a float, everything is converted to a double
   @item  If the first arg is rational, and the second argument is a large integer, everything is converte to a double
   @item  If the first arg is rational, and the second argument is a small integer, the result is a rational, and no conversion is done
   @item  Otherwise, the result is either an integer or a biginteger (depending on the size of the result). It is possible to get an overflow here.
@end itemize

Three functions are provided for dealing with rationals:
@itemize @bullet
   @item  rdiv(+Numerator, +Denominator) will evaluate to a rational with the specified numerator and denominator
   @item  rational(+Float) will evaluate to a rational that evaluates exactly to Float.
   @item  rationalize(+Float) evaluates to a rational that is very close to Float. The result is only accurate within the rounding error of floating point numbers, generally producing a much smaller denominator.
@end itemize

rational/1 and rationalize/1 are inspired by SWI-Prolog, which in turn says that ``The names rational/1 and rationalize/1 as well as their semantics are inspired by Common Lisp.''.

Additionally, a predicate rational/1 will succeed if its argument is a rational (similar to float/1, integer/1 and atom/1). integer/1 succeeds for both IntegerTerms and BigIntegerTerms.

@node Non-ISO arithmetic
@subsection Non-ISO arithmetic functions
If gnu.prolog.vm.Evaluate.strictISO is set to false then:
@itemize @bullet
   @item  Several functions that would otherwise raise a domain error now evaluate to their logical values (for example, floor(3) is allowed and evaluates to 3)
   @item  div/2 is provided. This is inspired by SWI-Prolog, and has the property that for every pair of integers X,Y where Y =\= 0:
   @example
   Q is div(X, Y),
   M is mod(X, Y),
   X =:= Y*Q+M.
   @end example
   @item  gcd(A,B) evaluates to the greatest common divisor of A and B.
@end itemize
@node Contributing
@chapter Contributing
The GNU Prolog For Java provides users with a great way of performing Prolog tasks through Java. This project could do with contributions from increasing number of users.

@itemize @arrow
@item
The canonical git repository is the one on savannah. The other active github repositories for GNU Prolog For Java can be found 
@uref{https://github.com/drt24/gnuprologjava} and @uref{https://github.com/rishabhgarg/gnuprologjava-1}. You can submit issues on the same; but preferably you must submit the issues here @uref{https://savannah.gnu.org/bugs/?group=gnuprologjava}. 
@item
You are also welcome to submit the patches on the same. The savannah site contains several bugs that GPJ currently has.
@item
You can participate in discussions and view the archives on the following @uref{http://lists.gnu.org/archive/html/info-gnuprologjava/}
@item
You can also have your queries handled by mailing at @email{info-gnuprolog@@gnu.org}.
@end itemize

@node GNU Lesser General Public License
@appendix GNU Lesser General Public License
@include gpl.texinfo
@include lgpl.texinfo
@node Index
@unnumbered Index

@printindex cp

@bye
